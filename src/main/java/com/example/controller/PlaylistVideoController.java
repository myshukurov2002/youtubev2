package com.example.controller;import com.example.dto.ApiResponse;import com.example.dto.PlaylistVideoDTO;import com.example.dto.VideoDTO;import com.example.enums.Language;import com.example.mapper.PlaylistVideoInfoMapper;import com.example.service.PlaylistVideoService;import jakarta.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/v1/playlist-video")public class PlaylistVideoController {    @Autowired    private PlaylistVideoService playlistVideoService;    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")    @PostMapping("/close/create")    public ResponseEntity<ApiResponse> create(@Valid @RequestBody PlaylistVideoDTO dto,                                              @RequestParam(defaultValue = "en") Language lang) {        ApiResponse response = playlistVideoService.create(dto, lang);        if (response.getStatus()) {            return ResponseEntity                    .status(HttpStatus.CREATED).body(response);        } else {            return ResponseEntity.badRequest().body(response);        }    }    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")    @PutMapping("/close/update/{id}")    public ResponseEntity<ApiResponse> update(@PathVariable Integer id,                                              @Valid @RequestBody PlaylistVideoDTO dto,                                              @RequestParam(defaultValue = "en") Language lang) {        ApiResponse response = playlistVideoService.update(id, dto, lang);        if (response.getStatus()) {            return ResponseEntity                    .status(209) //update status                    .body(response);        } else {            return ResponseEntity.badRequest().body(response);        }    }    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")    @DeleteMapping("/close/delete/{id}")    public ResponseEntity<ApiResponse> delete(@PathVariable Integer id,                                              @RequestParam(defaultValue = "en") Language lang) {        ApiResponse response = playlistVideoService.delete(id, lang);        if (response.getStatus()) {            return ResponseEntity                    .status(HttpStatus.NO_CONTENT) // delete status                    .body(response);        } else {            return ResponseEntity.badRequest().body(response);        }    }    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")    @DeleteMapping("/close/delete-by-playlist/{id}")    public ResponseEntity<ApiResponse> deleteByPlaylistId(@PathVariable Integer id,                                                          @RequestParam(defaultValue = "en") Language lang) {        ApiResponse response = playlistVideoService.deleteByPlaylistId(id, lang);        if (response.getStatus()) {            return ResponseEntity                    .status(HttpStatus.NO_CONTENT) // delete status                    .body(response);        } else {            return ResponseEntity.badRequest().body(response);        }    }    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")    @DeleteMapping("/close/delete-by-video/{id}")    public ResponseEntity<ApiResponse> deleteByVideoId(@PathVariable String id,                                                       @RequestParam(defaultValue = "en") Language lang) {        ApiResponse response = playlistVideoService.deleteByVideoId(id, lang);        if (response.getStatus()) {            return ResponseEntity                    .status(HttpStatus.NO_CONTENT) // delete status                    .body(response);        } else {            return ResponseEntity.badRequest().body(response);        }    }    @GetMapping("/open/get/video-list-by-playlist/{id}")    public ResponseEntity<List<PlaylistVideoInfoMapper>> getVideoListByPlaylistId(@PathVariable Integer id,                                                                                  @RequestParam(defaultValue = "en") Language lang) {        List<PlaylistVideoInfoMapper> playlistVideoDTOList = playlistVideoService                .getVideoListByPlaylistId(id, lang);        return ResponseEntity.ok(playlistVideoDTOList);    }}