create or replace function video_like()    returns trigger as$$begin    if tg_op = 'insert' then        if new.is_liked = 'LIKE' then            update video v            set like_count = like_count + 1            where v.id = new.video_id;        elseif new.is_liked = 'DISLIKE' then            update video v            set dislike_count = dislike_count + 1            where v.id = new.video_id;        end if;    elseif tg_op = 'update' then        if new.is_liked = 'LIKE' and old.is_liked = 'DISLIKE' then            update video v            set like_count    = like_count + 1,                dislike_count = dislike_count - 1            where v.id = new.video_id;        elseif new.is_liked = 'DISLIKE' and old.is_liked = 'LIKE' then            update video v            set like_count    = like_count - 1,                dislike_count = dislike_count + 1            where v.id = new.video_id;        elseif new.is_liked = 'DISLIKE' and old.is_liked = 'DISLIKE' then            update video v            set dislike_count = dislike_count - 1            where v.id = new.video_id;        elseif new.is_liked = 'LIKE' and old.is_liked = 'LIKE' then            update video v            set like_count = like_count - 1            where v.id = new.video_id;        end if;    end if;    return new;end;$$ language plpgsql;create or replace trigger video_like_trigger    before insert or update    on video_like_history    for each rowexecute procedure video_like();RAISE NOTICE 'Trigger fired: %', tg_op; -- Log the trigger operationcreate database youtube